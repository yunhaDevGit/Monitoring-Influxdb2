<html>
<head>
  <title>Example: Flux Query Results visualized with Giraffe</title>
  <script>
    // required by react
    window.process = {
      env : 'development'
    }
    // required by giraffe
    global = window
  </script>
  <!--  React, React-DOM, Firaffe 추가-->
  <script src="https://unpkg.com/react@17.0.0/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@influxdata/giraffe@0.41.0/dist/index.js"></script>
  <script src="https://unpkg.com/@influxdata/influxdb-client/dist/index.browser.js"></script>
  <script src="https://unpkg.com/@influxdata/influxdb-client-giraffe/dist/index.js"></script>
  <script src="/js/env_browser.js"></script>
</head>
<body>
<h1>Example: Flux Query Results visualized with Giraffe</h1>
<fieldset>
  <legend>Flux Query</legend>
  <div style="display:flex; margin-bottom: 10px;">
    <textarea id="fluxQuery" style="flex: 1" rows="2"></textarea>
  </div>
</fieldset>
<fieldset>
  <legend>Line Visualization</legend>
  <div style="width: 100%;height: 500px; border: 1px solid grey; margin-bottom: 10px;" id="lineView">
  </div>
</fieldset>
<fieldset>
  <legend>Heatmap Visualization</legend>
  <div style="width: 100%;height: 500px; border: 1px solid grey; margin-bottom: 10px;" id="heatmapView">
  </div>
</fieldset>
<fieldset>
  <legend>Histogram Visualization</legend>
  <div style="width: 100%;height: 500px; border: 1px solid grey; margin-bottom: 10px;" id="histogramView">
  </div>
</fieldset>

<fieldset>
  <legend>Scatter Visualization</legend>
  <div style="width: 100%;height: 500px; border: 1px solid grey; margin-bottom: 10px;" id="scatterView">
  </div>
</fieldset>
<script>
  // get query from request parameter or use default
  // DB Connection 및 쿼리문 작성
  fluxQuery = new URLSearchParams(window.location.search).get('fluxQuery');
  if (!fluxQuery){
    // range(start: -15m) -> 지난 15분 동안의 데이터를 가져온다
    fluxQuery = `from(bucket:"cloudit") |> range(start: -15m)   |> filter(fn: (r) => r["_measurement"] == "cpu")
       |> filter(fn: (r) => r["_field"] == "usage_system")
       |> filter(fn: (r) => r["cpu"] == "cpu0" or r["cpu"] == "cpu1" or r["cpu"] == "cpu2")`
  }
  const fluxQueryInput = document.getElementById('fluxQuery')
  fluxQueryInput.value =  fluxQuery

  // create query API
  const {url, token, org} = window.INFLUX_ENV // loaded in ./env_browser.js
  const influxDBClient = window['@influxdata/influxdb-client']
  const influxDB = new influxDBClient.InfluxDB({url, token})
  const queryApi = influxDB.getQueryApi(org)

  // execute query and fill query data into giraffe table
  const giraffe = window['@influxdata/giraffe']

  function lineRenderResults({error, table}){
    if (error){
      // render error message
      return React.createElement('center', null, error.toString())
    } else if (table.length) {
      // render giraffe plot
      const lineConfig = {
        table: table,
        layers: [{
          type: 'line',
          x: '_time',
          y: '_value',
          fill: [],
          colors: ['#31C0F6', '#A500A5', '#FF7E27']
        }],
        valueFormatters: {
          _time: giraffe.timeFormatter({
            timeZone: 'Asia/Seoul',
            format: 'YYYY-MM-DD HH:mm:ss',
          }),
        }
      };
      return React.createElement(giraffe.Plot, {config: lineConfig})
    } else {
      // render empty table recevied
      return React.createElement('center', null, 'Empty Table Received')
    }
  }

  function heatmapRenderResults({error, table}){
    if (error){
      // render error message
      return React.createElement('center', null, error.toString())
    } else if (table.length) {
      // render giraffe plot
      const heatmapConfig = {
        table: table,
        layers: [{
          type: 'heatmap',
          x: '_time',
          y: '_value',
          binSize: 10
        }],
        valueFormatters: {
          _time: giraffe.timeFormatter({
            timeZone: 'Asia/Seoul',
            format: 'YYYY-MM-DD HH:mm:ss',
          }),
        }
      };
      return React.createElement(giraffe.Plot, {config: heatmapConfig})
    } else {
      // render empty table recevied
      return React.createElement('center', null, 'Empty Table Received')
    }
  }

  function histogramRenderResults({error, table}){
    if (error){
      // render error message
      return React.createElement('center', null, error.toString())
    } else if (table.length) {
      // render giraffe plot
      const histogramConfig = {
        table: table,
        layers: [{
          type: 'histogram',
          x: '_value',
          position: 'stacked',
          binCount: 30
        }],
        valueFormatters: {
          _time: giraffe.timeFormatter({
            timeZone: 'Asia/Seoul',
            format: 'YYYY-MM-DD HH:mm:ss',
          }),
        }
      };
      return React.createElement(giraffe.Plot, {config: histogramConfig})
    } else {
      // render empty table recevied
      return React.createElement('center', null, 'Empty Table Received')
    }
  }

  function scatterRenderResults({error, table}){
    if (error){
      // render error message
      return React.createElement('center', null, error.toString())
    } else if (table.length) {
      // render giraffe plot
      const scatterConfig = {
        table: table,
        layers: [{
          type: 'scatter',
          x: '_time',
          y: '_value'
        }],
        valueFormatters: {
          _time: giraffe.timeFormatter({
            timeZone: 'Asia/Seoul',
            format: 'YYYY-MM-DD HH:mm:ss',
          }),
        }
      };
      return React.createElement(giraffe.Plot, {config: scatterConfig})
    } else {
      // render empty table recevied
      return React.createElement('center', null, 'Empty Table Received')
    }
  }

  const influxDBClientGiraffe = window['@influxdata/influxdb-client-giraffe']
  // graph 그리기
  function queryAndVisualizeLine() {
    influxDBClientGiraffe.queryToTable(
        queryApi,
        fluxQueryInput.value,
        giraffe.newTable
    ). then(table => {
      console.log('queryToTable returns', table)
      ReactDOM.render(
          React.createElement(lineRenderResults, {table}),
          document.getElementById('lineView')
      );
    }). catch(error => {
      console.log('queryToTable fails', error)
      ReactDOM.render(
          React.createElement(lineRenderResults, {error}),
          document.getElementById('lineView')
      );
    })
  }

  // heatmap 그리기
  function queryAndVisualizeHeatMap() {
    influxDBClientGiraffe.queryToTable(
        queryApi,
        fluxQueryInput.value,
        giraffe.newTable
    ). then(table => {
      console.log('queryToTable returns', table)
      ReactDOM.render(
          React.createElement(heatmapRenderResults, {table}),
          document.getElementById('heatmapView')
      );
    }). catch(error => {
      console.log('queryToTable fails', error)
      ReactDOM.render(
          React.createElement(heatmapRenderResults, {error}),
          document.getElementById('heatmapView')
      );
    })
  }

  // histogram 그리기
  function queryAndVisualizeHistogram() {
    influxDBClientGiraffe.queryToTable(
        queryApi,
        fluxQueryInput.value,
        giraffe.newTable
    ). then(table => {
      console.log('queryToTable returns', table)
      ReactDOM.render(
          React.createElement(histogramRenderResults, {table}),
          document.getElementById('histogramView')
      );
    }). catch(error => {
      console.log('queryToTable fails', error)
      ReactDOM.render(
          React.createElement(histogramRenderResults, {error}),
          document.getElementById('histogramView')
      );
    })
  }

  // scatter 그리기
  function queryAndVisualizeScatter() {
    influxDBClientGiraffe.queryToTable(
        queryApi,
        fluxQueryInput.value,
        giraffe.newTable
    ). then(table => {
      console.log('queryToTable returns', table)
      ReactDOM.render(
          React.createElement(scatterRenderResults, {table}),
          document.getElementById('scatterView')
      );
    }). catch(error => {
      console.log('queryToTable fails', error)
      ReactDOM.render(
          React.createElement(scatterRenderResults, {error}),
          document.getElementById('scatterView')
      );
    })
  }
  //
  // let timerId1 = null;
  // let timerId2 = null;
  // let timerId3 = null;

  function graphViewMonitoring() {
    queryAndVisualizeLine();
    setInterval(queryAndVisualizeLine, 10000);
  }

  function heatMapViewMonitoring() {
    queryAndVisualizeHeatMap();
    setInterval(queryAndVisualizeHeatMap, 10000);
  }

  function histogramViewMonitoring() {
    queryAndVisualizeHistogram();
    setInterval(queryAndVisualizeHistogram, 10000);
  }


  function scatterViewMonitoring() {
    queryAndVisualizeScatter();
    setInterval(queryAndVisualizeScatter, 10000);
  }

  graphViewMonitoring()
  heatMapViewMonitoring()
  histogramViewMonitoring()
  scatterViewMonitoring()

</script>
</body>
</html>